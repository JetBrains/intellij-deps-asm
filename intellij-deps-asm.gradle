//[JB] The script renames ASM packages using the given prefix, merges modules into "fat" artifacts, and publishes them.
//[JB] Relies on build artifacts, so run `gradle jar` first.

plugins { id 'com.github.johnrengelman.shadow' version '6.1.0' }

apply plugin: 'maven-publish'

configure(project) {
  project.ext.prefix = project.ext.properties.get('intellij.asm.prefix', 'org.jetbrains')
  project.ext.dirPrefix = project.ext.prefix.replace('.', '/')

  def moduleNames = project.ext.properties.get('intellij.asm.modules', 'commons,tree,analysis,util') as String
  def modules = ['asm'] + moduleNames.split(',').findAll { !it.isEmpty() }.collect { "asm-${it}" }

  project.ext.jarFiles = []
  project.ext.srcDirs = []
  for (module in modules) {
    def libsDir = file("${module}/build/libs")
    assert libsDir.isDirectory(): "artifacts directory '${libsDir}' doesn't seem to exist"
    def jars = libsDir.listFiles()
    def mainJar = jars.find { it.name.matches(/${module}-[\d.]+(-[^-]+)?\.jar/) }
    assert mainJar != null: "unable to detect main .jar in ${jars}"
    project.ext.jarFiles += mainJar

    def srcDir = file("${module}/src/main/java")
    assert srcDir.isDirectory(): "source directory '${srcDir}' doesn't seem to exist"
    project.ext.srcDirs += srcDir

    if (module == 'asm') {
      project.version = mainJar.name.find(/asm-(.+)\.jar/, { it[1] })
    }
  }

  project.ext.jarFile = "asm-all-${project.version}.jar"
  project.ext.srcFile = "asm-all-${project.version}-sources.jar"

  println "prefix: ${project.ext.prefix}"
  println "modules: ${modules}"
  println "version: ${project.version}"
}

task fatJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  destinationDirectory = file("$projectDir")
  archiveFileName = project.ext.jarFile
  from project.ext.jarFiles as File[]
  exclude 'module-info.class'
  relocate 'org.objectweb.asm', "${project.ext.prefix}.org.objectweb.asm"
}

task fatSources(type: Jar) {
  destinationDirectory = file("$projectDir")
  archiveFileName = project.ext.srcFile
  archiveClassifier = "sources"
  from project.ext.srcDirs as File[]
  filter { it.replace('org.objectweb.asm', "${project.ext.prefix}.org.objectweb.asm") }
  into project.ext.dirPrefix
}

publishing {
  publications {
    space(MavenPublication) {
      groupId 'org.jetbrains.intellij.deps'
      artifactId 'asm-all'
      artifact fatJar
      artifact fatSources
    }
  }
  repositories {
    maven {
      url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies"
      credentials {
        username = System.getenv('INTELLIJ_DEPENDENCIES_BOT')
        password = System.getenv('INTELLIJ_DEPENDENCIES_TOKEN')
      }
    }
  }
}
